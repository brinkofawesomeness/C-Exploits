Sploit1 exploits a weak block list vulnerability. BCVS does not verify that the file being checked in isn't a malicious block list file, so a user could create their own block.list file and use that to overwrite the original block list, giving them access to check in/out any file that they please.

This was figured out by playing around with the sudo command as a student. Whenever we would try it out, it would say something like "User student is not in sudoers file. This will be recorded." After some intense googling about sudoers files, we had the idea to try to overwrite it, which we found out was blocked by the block list. We knew if we could get around the block list somehow, that this would probably work. Thankfully, that was easy once we tried to check in our own block list.

# sploit1.sh LINE BY LINE

1.) Changing directory to where BCVS is already installed in the VM.
2.) "touch block.list" creates a blank block list file.
3.) Our new blank block list is checked in with the BCVS program, which completely overwrites the old one, giving us access to check in/out whatever we want.
4-5.) Writing a new "sudoers" file, which controls who has sudo/root access on the machine. The new sudoers file only includes root and student users. *Note that it doesn't include "theboss" user!
6.) Checking in our new sudoers file that we wrote.
7.) Remove the sudoers file we wrote from the BCVS directory (it's still in the version control directory though!).
8.) Create a symlink to the actual sudoers file on the machine in the BCVS directory. We can't overwrite it as a student since we don't have root access (spoiler: the BCVS program can!).
9.) Change the $USER variable to "root" instead of "student". 
10.) Use BCVS to overwrite the actual sudoers file (via symlink) with the malicious sudoers file we saved in the version control directory!
11.) "sudo su" gives us a root shell!

*The really cool thing about this exploit is that because we overwrote the sudoers file completely with only the users "root" and "student", when "theboss" user logs back into the system they won't have root access anymore, so this exploit actually shuts out the initial privileged user!
